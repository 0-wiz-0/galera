====================================
 Galera Replication Architecture
====================================

As we learned in the introduction, synchronous replication
uses eager replication, where the nodes keep all other nodes
synchronized by updating all replicas in a single transaction.
In other words, when a transaction commits, all nodes have the
same value. This takes place by using write set replication
over group communication.

The Galera replication architecture software entities are 

- *DBMS* |---| A Database Management System (DBMS), such as MySQL.
- *wsrep API* |---| The wsrep API defines the interface and the
  responsibilities for the DBMS and replication provider. The
  wsrep API consists of:

  - *wsrep hooks* |---| The wsrep integration in the DBMS engine.
  - *dlopen* |---| The ``dlopen()`` function makes the wsrep
    provider available to *wsrep hooks*. 

- *Galera plugin* |---| The Galera plugin implements the 
  synchronous replication between the datavase nodes. The
  Galera plugin consists of:

  - *Galera wsrep provider* implements the wsrep API for the Galera
    plugin.
  - *Certification layer* |---| The certification layer prepares
    the write sets and performs the certification.
  - *Replication layer* |---| The replication layer manages the
    replication protocol and provides the total ordering
    capability.
  - *Group communication framework* |---| The group communication
    framework provides a plugin architecture for various group
    communication systems.

- *Group communication plugins* |---| Galera can use various
  group communication systems. We have used, for example,
  Spread (http://www.spread.org/) and our own implementations,
  such as *vsbes* and *gemini*.

The entities above are depicted in the figure below and explained
in more detail in the chapters below:

.. figure:: images/galeralibrary.png

   *Galera Replication Architecture*


-----------------------------
 Database Management System
-----------------------------

Galera supports the following database management systems:

- MySQL
- MariaDB

---------------
 wsrep API
---------------

The *wsrep API* is a generic replication plugin interface for databases.
The API defines a set of application callbacks and replication
plugin calls. 

The *wsrep API* is used in a replication model where an application, such
as a database server, has a state. In practice, the state refers to the
contents of the database. When the database is used, clients modify the
database contents and the database state changes. This changing of the
state is represented as a series of atomic changes (transactions). In
a database cluster, all nodes always have the same state, which they
synchronize with each other by replicating and applying state changes
in the same serial order.

From a more technical perspective, the state change process is
as follows:

1. A state change takes place on the database.
2. The *wsrep hooks* within the database populate the write sets
   for the other database nodes in the cluster.
3. The *wsrep hooks* call the *Galera wsrep provider* through the
   ``dlopen()`` function.
4. The Galera plugin handles the write set certification and
   replication to the other database nodes in the cluster.

At the receiving end, the application process takes place by high
priority transaction(s).

To keep the state identical on all nodes, the wsrep API uses a global
transaction ID (GTID), which is used to both:

- Identify the state change
- Identify the state itself by the ID of the last state change

The GTID consists of:

- A state UUID, which uniquely identifies the state and the
  sequence of changes it undergoes
- An ordinal sequence number (seqno, a 64-bit signed integer)
  to denote the position of the change in the sequence
  
By using the GTID, you can

- Compare the application states
- Establish the order of state changes
- Determine whether the change was applied or not
- Whether the change is applicable at all to a given state (in
  short, whether it is all-powerful)

In a human-readable format, the GTID might look like this::

    45eec521-2f34-11e0-0800-2a36050b826b:94530586304

---------------
 Galera Plugin
---------------

The Galera plugin components are described in the chapters below.

Galera wsrep Provider
=====================

*Galera wsrep provider* implements the *wsrep API* within the Galera plugin.

Certification Layer
===================

The certification layer prepares the write sets. The write
sets can carry original SQL statements or, for best performance,
row based replication events (available in MySQL 5.1 and onwards.

Furthermore, the certification layer performs certification
by comparing keys in the write sets. By comparing the keys,
the Galera certification algorithm detects possible conflicts
and can roll back victim transactions, if any. This improves
the efficiency of multi-master replication.

The certification layer guarantees that all cluster nodes can
concurrently modify the same table and still stay consistent.
As a result, no master failovers are required and there is no
single point of failure in the cluster.

Replication Layer
==================

The replication layer manages the replication protocol and
provides the total ordering capability, that is, defines the
order of committing transactions in the cluster.

The replication layer lets the actual SQL statement processing
happen uninterrupted, resembling the native MySQL method. This
makes client interaction with the cluster fast and, for the
application, the Galera cluster appears like any native MySQL
server. The only difference is commit processing, where a certain
delay is caused by synchronization with the cluster.


Group Communication Framework
==============================

The group communication framework provides a plugin
architecture for various group communication systems.

The Galera cluster is built on top of a proprietary
group communication system layer which implements
virtual synchrony Quality of Service (QoS). Virtual
synchrony unifies the data delivery and cluster membership
service, which provides clear formalism for message
delivery semantics. 

Virtual Synchrony guarantees consistency, but not temporal
synchrony, which is required for smooth multi-master
operation. For this purpose, Galera implements its own
runtime-configurable temporal flow control, which keeps
nodes synchronized to a fraction of second.

The group communication framework also provides total
ordering of messages from multiple sources, which is
used to build global transaction IDs in a multi-master
cluster. 

At the transport level, Galera cluster is a symmetric
undirected graph, where all database nodes are connected
with each other over a TCP connection. By default, TCP
is used for both message replication and the cluster
membership service, but also UDP multicast can be used
for replication in a Local Area Network (LAN).


.. |---|   unicode:: U+2014 .. EM DASH
   :trim:



